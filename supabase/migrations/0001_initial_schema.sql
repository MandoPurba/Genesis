-- Create a table for public profiles
create table profiles (
  id uuid references auth.users on delete cascade not null primary key,
  updated_at timestamp with time zone,
  full_name text,
  avatar_url text,
  currency text default 'IDR' not null
);

-- Set up Row Level Security (RLS)
-- See https://supabase.com/docs/guides/auth/row-level-security
alter table profiles
  enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
  for select using (true);

create policy "Users can insert their own profile." on profiles
  for insert with check (auth.uid() = id);

create policy "Users can update own profile." on profiles
  for update using (auth.uid() = id);

-- This trigger automatically creates a profile entry when a new user signs up.
create function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$ language plpgsql security definer;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- ACCOUNTS table
create table accounts (
  id bigint generated by default as identity primary key,
  user_id uuid references public.profiles on delete cascade not null,
  created_at timestamp with time zone default now() not null,
  name text not null,
  type text, -- e.g., 'Bank Account', 'E-Wallet', 'Cash'
  balance numeric(15, 2) default 0.00 not null
);

alter table accounts enable row level security;
create policy "Users can manage their own accounts." on accounts for all using (auth.uid() = user_id);

-- CATEGORIES table
create table categories (
  id bigint generated by default as identity primary key,
  user_id uuid references public.profiles on delete cascade not null,
  name text not null,
  type text not null, -- 'income' or 'expense'
  created_at timestamp with time zone default now() not null
);

alter table categories enable row level security;
create policy "Users can manage their own categories." on categories for all using (auth.uid() = user_id);

-- TRANSACTIONS table
create type transaction_type as enum ('income', 'expense', 'transfer');

create table transactions (
  id bigint generated by default as identity primary key,
  user_id uuid references public.profiles on delete cascade not null,
  date timestamp with time zone default now() not null,
  type transaction_type not null,
  amount numeric(15, 2) not null,
  description text,
  category_id bigint references public.categories on delete set null,
  account_id bigint references public.accounts on delete cascade not null,
  -- For transfers
  to_account_id bigint references public.accounts on delete cascade,
  created_at timestamp with time zone default now() not null,
  constraint amount_must_be_positive check (amount > 0),
  constraint transfer_accounts_must_be_different check (account_id <> to_account_id)
);

alter table transactions enable row level security;
create policy "Users can manage their own transactions." on transactions for all using (auth.uid() = user_id);

-- BUDGETS table
create type budget_period as enum ('weekly', 'monthly', 'yearly');

create table budgets (
  id bigint generated by default as identity primary key,
  user_id uuid references public.profiles on delete cascade not null,
  category_id bigint references public.categories on delete cascade not null,
  amount numeric(15, 2) not null,
  period budget_period not null,
  start_date date not null,
  created_at timestamp with time zone default now() not null,
  constraint amount_must_be_positive check (amount > 0)
);

alter table budgets enable row level security;
create policy "Users can manage their own budgets." on budgets for all using (auth.uid() = user_id);

-- Insert some default categories for new users via a trigger
create function public.handle_new_profile()
returns trigger as $$
begin
  -- Default Expense Categories
  insert into public.categories (user_id, name, type) values
  (new.id, 'Food & Drinks', 'expense'),
  (new.id, 'Transportation', 'expense'),
  (new.id, 'Entertainment', 'expense'),
  (new.id, 'Shopping', 'expense'),
  (new.id, 'Utility Bills', 'expense'),
  (new.id, 'Education', 'expense'),
  (new.id, 'Health', 'expense'),
  (new.id, 'Rent', 'expense'),
  (new.id, 'Other', 'expense');

  -- Default Income Categories
  insert into public.categories (user_id, name, type) values
  (new.id, 'Salary', 'income'),
  (new.id, 'Gifts', 'income'),
  (new.id, 'Sales', 'income'),
  (new.id, 'Investments', 'income'),
  (new.id, 'Other', 'income');
  return new;
end;
$$ language plpgsql security definer;

create trigger on_profile_created
  after insert on public.profiles
  for each row execute procedure public.handle_new_profile();
